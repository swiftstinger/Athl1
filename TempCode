Dont show this again tick boxes with data for each scene


Comp # in import later

add/view comps on long press
add label to relay
change cell


delete competitor

in ceventscores and backup ceventscores

- (void)willSave
{
    [super willSave];

    if (self.isDeleted)
        return;

    if (self.products.count == 0)
        [self.managedObjectContext deleteObject:self];
}


relays


enter relay result how to set up relay teams to make results entry usefull.

        need to view and enter comps but click should add result (mabe add section at bottom of view that can add and delete?  and have result at top?)

Event types track field High Jump Relay  add relay to
A Event make menu
B import done
C Export done
D Scores done
E backup and online?

.competitor.


1. Comp in team view
    Unwind done trigger alert with ifs for add
    conditional segue for com result view (mabe only change cell to show team not name)
2. Competitor resultsview/ new for relays    if relays in comp in team view (mabe only change cell to show team not name)

3. enter results view controller conditional segue depending on result type (good for high jump and throws later as well)
4. 4.1 New eventcontroller choose team for plus
   4.2  new controller for click and
    4.3 then choose comp with team name for plus


4. showeventscorecopysheet set cell on check to team name if Backupevent is relay


5. go through all backups and saves and ensure comps are changed to nsset handle on copy and save

6. server change ceventscores to comps many


7. Details result view comp view cell change for relay



////// NSSET for ceventscore and backupceventscore and server ceventscore /////


// try new webview with html

Previews

Immediate Accurate Results


- Results view screens
- Colour and output?

Share and Input scores from other devices

- Other devices while next to track picture

Import and populate Events in seconds

- How to show import functions



Export For post event Publication and Analysis

- Excell sheets with details

Print Final results

- Print formatter



//////

IDS give new on load from import to make order good



done import
todo:




6.  print or html view make pictures

6. change icons

7. info buttons tut expand

8. combine comps
9. log events



[Flurry logEvent:@"Article_Read"];



- (void)loadCSVArray {
NSLog(@"here");

AppDelegate* appDelegate = (AppDelegate*)[[UIApplication sharedApplication]delegate];

NSArray  *newArray = appDelegate.csvDataArray;
//appDelegate.csvDataArray = nil
        for (NSString* string in newArray) {
                    NSLog(@"%@",string);
            
            //create objects here
            
            
            
            
            
        }
    


}


AppDelegate* appDelegate = (AppDelegate*)[[UIApplication sharedApplication]delegate];
    
     if (appDelegate.csvDataArray != nil) {
         NSLog(@"importing csv");
         
         /// show button
         
            [self loadCSVArray];
            

     }
     else
     {
        
            // hide button
            NSLog(@"not importing");

     }



// add to all importing areas





event for competitor, warn if deleting one that has score entered resultentered prompt

keyboard input? validate input already does it, dont know how...

Backups
///////
fixed online update bug when running a host and results entry meet on the same device




backups only change updatedate if updated itself    not work too many updates

Set restore backups

set info buttons

set not load comps in event in search

   NSPredicate *predicate = [NSPredicate predicateWithFormat:@"(meet == %@) AND (SUBQUERY(cEventScores, $x, $x IN %@).@count < 1)",self.eventObject.meet, array];


what does reset do? tutorial  set as not done and segue back to resutlsenter



////////////
want in tutorial
///////////

set not edited if owner done

!!! check owner id before ship in recodnames done



1. pause when done event enter in slave needed? done

2. change indicator on edited not done    done

8 done

2. hook up refresh scores or remove (i vote for remove) done

0.1 indicator if owner, change number of online meets to 2 now at 4


1. lock slave changes done

2. tut set up done, now do pictures

3. save backup of events that were done in master or sent in slave  mabeeee



4. send button instead of done for slave?

5. update all ceventscores on results view (plus pause)  not needed but test more late




///

error checking
1. check if any other objects need to be checked for before fetch completion

2. delete slave block ui? not found


3. save context on deletes chekc all



//


dispatch_async(dispatch_get_main_queue(), ^{

});



////////////////
///////////////
////////////

///
owner update push  (on create with updatebyuser not owner  );  later
    retrieve object and then push object and meet with new date.

servant update server push later


5. add competitor merge later



check internet connection before load try and handle error


add merge competitors section (hou kop met all die verskillende areas wat moet merge en verander..)











//////
//////  online entry done
//////
//////
//////
//////
//////
//////
//////
//////


learn how to set up defaults

set save as default option at bottom (lets do first option first and then after launch do next)



////

not done:

layout for field events

attempts after each other, just add result [ make easy to add at event]

add attempt insert distance (cell reads attemps and best attempt)

high jump keep track of last hight entered and give attempt markers clear, auto pass if next hight.

new hight, generate tabs (section), click pass fail. cell reads best attempt and number of jumps and number of cosecutive fails (reset for pass)

ceventscores add :
    consecutive fails (counter for hightjump)  check for order of consecutive in case jumps lower later so in order

    new object attempt:
        attempt number
        result
        cleared bool

        mabe add height object? check how sections work in uitableview core data






austhetic spacing to do

?high jump  make layout?

/////////////////////

if (meetobject.onlineID) {
    NSLog(@"onlineid is there %@",meetobject.onlineID);
    }
    else
    {
    NSLog(@"onlineid not found %@",meetobject.onlineID);
        NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",meetobject.meetID,timestamp];
      [meetobject setValue: onlineID forKey: @"onlineID"];
       NSLog(@"onlineid not found %@",meetobject.onlineID);
    }


 NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",newnumber,timestamp];
      [meet setValue: onlineID forKey: @"onlineID"];






for(Team *object in results) {
}


- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 


    if ([[segue identifier] isEqualToString:@"addEventForC"]) {
    
    UINavigationController *navController = (UINavigationController*)[segue destinationViewController];
    EventForCAddViewController* compAddController = (EventForCAddViewController*)[navController topViewController];

    
        [compAddController setCompetitorItem:self.competitorObject];
        [compAddController setManagedObjectContext:self.managedObjectContext];

    
    }
    
}



- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender {
   
    
    if ([identifier isEqualToString:@"unwindToSetupEventsForCDoneSegue"]) {
        
        //checks
        if (!self.isEditing) {
            self.meet = self.competitorItem.meet;
            int competitorEventLimit = [self.meet.cEventLimit intValue];
    
        int currentEventNumber = (int)[[self.competitorItem valueForKey:@"cEventScores"] count] ;
            if (competitorEventLimit != 0) {
            
                    if (!(competitorEventLimit>currentEventNumber)) {
    
                // nslog(@"in shouldperformsegue no");
                
                UIAlertController * alert=   [UIAlertController
                                    alertControllerWithTitle:@"Too many Events For Competitor"
                                    message:@"Please delete an event or change the number of events allowed per competitor"
                                    preferredStyle:UIAlertControllerStyleAlert];
     
     
                UIAlertAction* ok = [UIAlertAction
                        actionWithTitle:@"OK"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            [alert dismissViewControllerAnimated:YES completion:nil];
                             
                        }];
                        
                [alert addAction:ok];
     
                [self presentViewController:alert animated:YES completion:nil];
                return NO;
                }
                
            }
        
   
        }
    }
    
    return YES;              
}

////////////////////


[entity setUseGPS:[NSNumber numberWithBool:YES]];
And the other way around:

BOOL isGPSOn = [[entity useGPS] boolValue];

[self.meetObject setValue:[NSNumber numberWithBool:YES] forKey:@"divsDone"];
[[self.meetObject valueForKey: @"divsDone"] boolvalue]


// nslog(@"eventscores in competitor before %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);
        ceventscore.competitor = sourceViewController.competitorObject;
        
        // nslog(@"eventscores in competitor after %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);





NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"Meet"];
NSError *error = nil;
NSUInteger meetID = [self.managedObjectContext countForFetchRequest:fetchRequest error:&error];
[meet setValue: [NSNumber numberWithUnsignedInteger:meetID] forKey: @"meetID"];


string [format stringFromDate:fulldate]

 NSDate *fulldate = [object valueForKey:@"meetDate"];
    
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
format.dateFormat = @"dd-MM-yyyy";


cell.numberOfTeamsLabel.text = [NSString stringWithFormat:@"Teams: %@",  @([[object valueForKey:@"teams"] count] )];


/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    // In the simplest, most efficient, case, reload the table view.
    [self.tableView reloadData];
}
 */




 #pragma mark - Core Data stack

/**
 Returns the managed object context for the application.
 If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.
 */
- (NSManagedObjectContext *)managedObjectContext
{
    if (__managedObjectContext != nil)
    {
        return __managedObjectContext;
    }

    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil)
    {
        __managedObjectContext = [[NSManagedObjectContext alloc] init];
        [__managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
    return __managedObjectContext;
}

/**
 Returns the managed object model for the application.
 If the model doesn't already exist, it is created from the application's model.
 */
- (NSManagedObjectModel *)managedObjectModel
{
    if (__managedObjectModel != nil)
    {
        return __managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"iDocs" withExtension:@"momd"];
    __managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];    
    return __managedObjectModel;
}

/**
 Returns the persistent store coordinator for the application.
 If the coordinator doesn't already exist, it is created and the application's store added to it.
 */
- (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{
    if (__persistentStoreCoordinator != nil)
    {
        return __persistentStoreCoordinator;
    }

    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"iDocs.sqlite"];

    NSError *error = nil;
    __persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    if (![__persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error])
    {
        /*
         Replace this implementation with code to handle the error appropriately.

         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button.

         Typical reasons for an error here include:
         * The persistent store is not accessible;
         * The schema for the persistent store is incompatible with current managed object model.
         Check the error message to determine what the actual problem was.


         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.

         If you encounter schema incompatibility errors during development, you can reduce their frequency by:
         * Simply deleting the existing store:
         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]

         * Performing automatic lightweight migration by passing the following dictionary as the options parameter: 
         [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption, [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];

         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.

         */
        // nslog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }    

    return __persistentStoreCoordinator;
}


        ////////
        
        // Store meetID data
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     
     
     
     if (![defaults objectForKey:@"lastMeetID"]) {
     
     int idint = 0;
     NSNumber *idnumber = [NSNumber numberWithInt:idint];
     
     
     [defaults setObject:idnumber forKey:@"lastMeetID"];
     
     }
       
       NSNumber *oldnumber = [defaults objectForKey:@"lastMeetID"];
       
       
       int oldint = [oldnumber intValue];
       
       int newint = oldint + 1;
       
       NSNumber *newnumber = [NSNumber numberWithInt:newint];
       
       [meet setValue: newnumber forKey: @"meetID"];
       
        

        // nslog(@"meetname %@  meetID %@", meet.meetName, meet.meetID);

    [defaults setObject: newnumber forKey:@"lastMeetID"];
     
    [defaults synchronize];
     


        
    // Bumf
[mutableHTML appendString:@"<html> <head>"];
[mutableHTML appendString:@"<style> <!--table {} @page {margin:.75in .7in .75in .7in; }"];

[mutableHTML appendString:@"td { padding:0px; mso-ignore:padding; color:windowtext; font-size:10.0pt; font-weight:700; font-style:normal; text-decoration:none; white-space:nowrap; font-family:Garamond, serif; text-align:center; vertical-align:middle; border-top:1.0pt solid windowtext; border-right:1.0pt solid windowtext; border-bottom:1.0pt solid windowtext; border-left:1.0pt solid windowtext;; white-space:normal; width:136pt; height:19pt } --> </style>"];

[mutableHTML appendString:@"</head><body>"];

[mutableHTML appendString:@"<table border=0 cellpadding=0 cellspacing=0  style='border-collapse: collapse;'><tr  style='height:59.25pt'> "];
//[mutableHTML appendString:@"<table border=0 cellpadding=0 cellspacing=0  style='border-collapse: collapse;'><tr  style='height:30pt'> "];

[mutableHTML appendString:@"<td colspan="];
[mutableHTML appendFormat:@"%d",fullspannumber]; //columbs
 [mutableHTML appendString:@" style='font-size:28.0pt;'>"];
 
 // Meet Name and Date
 
 /*
NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
[dateFormat setDateFormat:@"yyyy-MM-dd"];

NSDateFormatter *timeFormat = [[NSDateFormatter alloc] init];
[timeFormat setDateFormat:@"HH:mm:ss"];

//NSDate *date = [[NSDate alloc] init];
NSDate *date = self.meetObject.meetDate;

NSString *theDate = [dateFormat stringFromDate:date];
//NSString *theTime = [timeFormat stringFromDate:date];




 
 [mutableHTML appendFormat:@"%@  %@",self.meetObject.meetName,theDate];
 */
 
 [mutableHTML appendFormat:@"%@",self.meetObject.meetName];
 
 //
 [mutableHTML appendString:@"</td> </tr><tr style='height:26.25pt'> "];
 [mutableHTML appendString:@"<td colspan="];
  [mutableHTML appendFormat:@"%d",fullspannumber]; //columbs
  [mutableHTML appendString:@" "];
[mutableHTML appendString:@"style='font-size:20.0pt'>"];
[mutableHTML appendString:@"OVERALL TOTALS"];
[mutableHTML appendString:@"</td>"];
[mutableHTML appendString:@"</tr> <tr > <td style='font-size:16.0pt'>"];
[mutableHTML appendString:@"DIVISION"];
[mutableHTML appendString:@"</td>"];

for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


 [mutableHTML appendString:@"<td style='font-size:20.0pt'>"];
 [mutableHTML appendFormat:@"%@",team.teamName];
 [mutableHTML appendString:@"</td>"];
 
 
 }
 [mutableHTML appendString:@"</tr>"];
 
 
 
 for (Division* div in [self.meetObject.divisions sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"divID" ascending:YES]]]) {
	
    [mutableHTML appendString:@"<tr > <td style='font-size:16.0pt' >"];
    [mutableHTML appendFormat:@"%@",div.divName];
    [mutableHTML appendString:@"</td>"];
     
     NSMutableArray* scoreArray = [[NSMutableArray alloc]init];
     NSMutableDictionary* nameDict = [[NSMutableDictionary alloc] init];
        for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = [NSNumber numberWithInt: [self sumResultsForTeam:team AndDiv:div]];
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
            
            [scoreArray addObject:numberInt];
            [nameDict setObject:numberInt forKey:team.teamName];
            
 
        }
     
        [mutableHTML appendString:@" </tr>"];
     /**
     
            spare outfits 2
     vest long top leggings cardy
     
     slippers
     
     outfit for tomorrow
     
     sleepingbag
     
     light on
     
     book
     
     
     **/
     
 /// Place
 [mutableHTML appendString:@"<tr> <td style='font-size:16.0pt' >"];
 [mutableHTML appendString:@"Rank"];
 [mutableHTML appendString:@"</td>"];
     
     
        int counter;
     
     
        for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {
            
            NSNumber* tempnumber = [nameDict objectForKey:team.teamName];
            NSSortDescriptor *highestToLowest = [NSSortDescriptor sortDescriptorWithKey:@"self" ascending:NO];
            NSArray*sortArray = [NSArray arrayWithObject:highestToLowest];
            [scoreArray sortUsingDescriptors:sortArray];
            counter = 0;
            NSNumber* scorenumber = scoreArray[counter];
            
            
            while (tempnumber != scorenumber) {
                counter++;
                scorenumber = scoreArray[counter];
            }
            
            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = [NSNumber numberWithInt: counter+1];
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
        }
        [mutableHTML appendString:@" </tr>"];
     
     
     

  
     

}
 
 // Event
 

  
  /// Final Total
  
  [mutableHTML appendString:@"<tr> <td style='font-size:20.0pt'>"];
  [mutableHTML appendString:@"TOTAL"];
  [mutableHTML appendString:@"</td>"];
  
 for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]])
    {
        

            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = team.teamScore;
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
 
        }
        [mutableHTML appendString:@" </tr>"];
//26.25
  
 
 [mutableHTML appendString:@"<tr style='height:48pt'> <td style='font-size:20.0pt'>"];
   [mutableHTML appendString:@"POSITION"];
  [mutableHTML appendString:@"</td>"];
  
  
 for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = team.teamPlace;
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
 
        }
        [mutableHTML appendString:@" </tr>"];


  [mutableHTML appendString:@"</table></body></html>"];

    ////