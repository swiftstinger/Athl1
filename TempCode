delete after saved

results done only send if slave and online !!

update from slave cehck deletes? mabe move first then move back if fail?

update to master done, add completion and check that completion does not trigger for each ceventscore and delete temp objects from server


get only owner meets on update onlinemeet

[array removeObject:@"Name2"];

on update owner

    read from server
    delete objects
    readd all objects

    deleted all extras and updated to server so last step done.


    add pause on update slave an flag success failure

    add pause on update serverbutton pressed


add edited and editeddone to results enter done buttons
add send button if onlinemeet and editDone if send succesfull




update all ceventscores in event on update any ceventscores (also delete normally)

master update

work by user and date? date to prevent horrible hybrids

delete files in inbox import twice error


must add online ids att create

///////////
refactor scores method needed for team add/remove | gevent options change | meet options change?
////////////
want in tutorial
///////////

deal with:

    lock all for score changes unless take offline

    update if edited record
        lastupdate attribute if date later than last update dont update?

        only ceventscores and competitors add until done then create copy and set if sent or not (sending failed resend button)
            attributes edited on current device for event
            check ceventscores and competitors

        after initial edit send all to new objects, if new ceventscore for event, create new one
        editing but not sent?

            //////////////
             if no event edited but not sent,  delete eventscores/competitors that not on list?

             untill then not allow resutls view.. may be inaccurate
            /////////////



    failed update
        copy of event will show not sent so can resend
        copy of competitors and ceventscores and event



    excess ceventscores and competitors if meet owner overrules  =? keep track if seen update by user and time and if after that then overwrite?
    initial submit user in each object and not update for him?

////////////////
///////////////
////////////

/// retrieving changes from server check send on each create so should be ok... check each date seperately for updates sent and then old retrieve

owner update all (button?) (and enter meet?)
    retrieve any comps and ceventscores of meetonlineID == meetObject.meetID not updatebyuser != owner

    delete temp record (temprecord + timestamp + vendorID + onlineID)


    set updatebyuser to owner and update date

    then send comps and ceventscores online plus meet with new date



servant update  on enter meet done



 on press update button
        check dates of meet and then update (use method already in place)

/// sending changes to server  not pause only warn if failed


both (create sent object objects  (new in datamodel) on send copy object to new sent object)



owner: add date to makeing all objects and add check if onlinemeet and isowner and then push to server (add to queue)

        new div  update date
        new gevent  update date
        new events (made in div and gevent done)  update date
        new team   update date
        new comp  in team view also in results enter      update date
        new ceventscore in results enter   update date
        edit ceventscore done button so results enter from edit update date

        for object
            update meetobject, not affect rest, add newupdate date, updateby user = owner



if servant (create sent object objects  (new in datamodel) on send copy object to new sent object)
servant: if online meet and not owner to:


        new comp  in team view also in results enter      update date
        new ceventscore in results enter   update date
        edit ceventscore done button so results enter from edit update date


        set updatebyuser as vendorid
        set update date

        push to server as tempmeetonlineid as recordID  (temprecord + timestamp + vendorID + onlineID)




///  subscriptions

owner update push  (on create with updatebyuser not owner  );  later
    retrieve object and then push object and meet with new date.

servant update server push later






add owner and updatebyuser to make meet





lock events and teams

add online ids to all creates? or timestamp to id's?' no

update only in meetmenu



add add for all and manage (should only add offline meets)



error record name cannot be nil for record deleted







IPHONE 6 score move left

add timestamp and device id to add's '

//////////
NSString *devID = [NSString stringWithFormat:@"%@",[[UIDevice currentDevice] identifierForVendor]];
        NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@%@",devID, object.cEventScoreID,timestamp];
      [object setValue: onlineID forKey: @"onlineID"];
       NSLog(@"onlineid not found %@",object.onlineID);
////////


1. add methods for objects send online

2. add fetch for object delete from online


3. then updates for results and competitors   cscores, ceventscores, competitors (add new tag to creation of competitor and ceventscore because they can be old)

4. update send online for event (sent in one channel, deleted in another, sent channel has userID as sent by with timestamp so all done after each other and then delete (so feth returns multiple versions of same send with a usernumberid and timestamp so go through each user and update last one and check updates against done meets and resolve clashes send after done, check on each access of event, check all on update button, and on load, and on resutls view. ))

5. add competitor merge later

[work out ceventscore so that cannot create more than needed]  mabe delete ceventscores for event (all) before import]
[protect not owner entry ceventscores by checking they were entered by him]

think of repurcussions if more than neccisary eventscores [wont score -  not problem?] or delete all so not a worry?

person at end needs to see all eventscores?





check save settings

check internet connection before load try and handle error

later  delay on load is done on my end?




onlinemeet handle error with popup?

competitors add timestamp

add seperate section for handling input records

add merge competitors section (hou kop met all die verskillende areas wat moet merge en verander..)



//////


learn how to set up defaults

set save as default option at bottom (lets do first option first and then after launch do next)



////

not done:

layout for field events

attempts after each other, just add result [ make easy to add at event]

add attempt insert distance (cell reads attemps and best attempt)

high jump keep track of last hight entered and give attempt markers clear, auto pass if next hight.

new hight, generate tabs (section), click pass fail. cell reads best attempt and number of jumps and number of cosecutive fails (reset for pass)

ceventscores add :
    consecutive fails (counter for hightjump)  check for order of consecutive in case jumps lower later so in order

    new object attempt:
        attempt number
        result
        cleared bool

        mabe add height object? check how sections work in uitableview core data






austhetic spacing to do

?high jump  make layout?

/////////////////////

if (meetobject.onlineID) {
    NSLog(@"onlineid is there %@",meetobject.onlineID);
    }
    else
    {
    NSLog(@"onlineid not found %@",meetobject.onlineID);
        NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",meetobject.meetID,timestamp];
      [meetobject setValue: onlineID forKey: @"onlineID"];
       NSLog(@"onlineid not found %@",meetobject.onlineID);
    }


 NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",newnumber,timestamp];
      [meet setValue: onlineID forKey: @"onlineID"];






for(Team *object in results) {
}


- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 


    if ([[segue identifier] isEqualToString:@"addEventForC"]) {
    
    UINavigationController *navController = (UINavigationController*)[segue destinationViewController];
    EventForCAddViewController* compAddController = (EventForCAddViewController*)[navController topViewController];

    
        [compAddController setCompetitorItem:self.competitorObject];
        [compAddController setManagedObjectContext:self.managedObjectContext];

    
    }
    
}



- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender {
   
    
    if ([identifier isEqualToString:@"unwindToSetupEventsForCDoneSegue"]) {
        
        //checks
        if (!self.isEditing) {
            self.meet = self.competitorItem.meet;
            int competitorEventLimit = [self.meet.cEventLimit intValue];
    
        int currentEventNumber = (int)[[self.competitorItem valueForKey:@"cEventScores"] count] ;
            if (competitorEventLimit != 0) {
            
                    if (!(competitorEventLimit>currentEventNumber)) {
    
                // nslog(@"in shouldperformsegue no");
                
                UIAlertController * alert=   [UIAlertController
                                    alertControllerWithTitle:@"Too many Events For Competitor"
                                    message:@"Please delete an event or change the number of events allowed per competitor"
                                    preferredStyle:UIAlertControllerStyleAlert];
     
     
                UIAlertAction* ok = [UIAlertAction
                        actionWithTitle:@"OK"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            [alert dismissViewControllerAnimated:YES completion:nil];
                             
                        }];
                        
                [alert addAction:ok];
     
                [self presentViewController:alert animated:YES completion:nil];
                return NO;
                }
                
            }
        
   
        }
    }
    
    return YES;              
}

////////////////////


[entity setUseGPS:[NSNumber numberWithBool:YES]];
And the other way around:

BOOL isGPSOn = [[entity useGPS] boolValue];

[self.meetObject setValue:[NSNumber numberWithBool:YES] forKey:@"divsDone"];
[[self.meetObject valueForKey: @"divsDone"] boolvalue]


// nslog(@"eventscores in competitor before %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);
        ceventscore.competitor = sourceViewController.competitorObject;
        
        // nslog(@"eventscores in competitor after %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);





NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"Meet"];
NSError *error = nil;
NSUInteger meetID = [self.managedObjectContext countForFetchRequest:fetchRequest error:&error];
[meet setValue: [NSNumber numberWithUnsignedInteger:meetID] forKey: @"meetID"];


string [format stringFromDate:fulldate]

 NSDate *fulldate = [object valueForKey:@"meetDate"];
    
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
format.dateFormat = @"dd-MM-yyyy";


cell.numberOfTeamsLabel.text = [NSString stringWithFormat:@"Teams: %@",  @([[object valueForKey:@"teams"] count] )];


/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    // In the simplest, most efficient, case, reload the table view.
    [self.tableView reloadData];
}
 */




 #pragma mark - Core Data stack

/**
 Returns the managed object context for the application.
 If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.
 */
- (NSManagedObjectContext *)managedObjectContext
{
    if (__managedObjectContext != nil)
    {
        return __managedObjectContext;
    }

    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil)
    {
        __managedObjectContext = [[NSManagedObjectContext alloc] init];
        [__managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
    return __managedObjectContext;
}

/**
 Returns the managed object model for the application.
 If the model doesn't already exist, it is created from the application's model.
 */
- (NSManagedObjectModel *)managedObjectModel
{
    if (__managedObjectModel != nil)
    {
        return __managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"iDocs" withExtension:@"momd"];
    __managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];    
    return __managedObjectModel;
}

/**
 Returns the persistent store coordinator for the application.
 If the coordinator doesn't already exist, it is created and the application's store added to it.
 */
- (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{
    if (__persistentStoreCoordinator != nil)
    {
        return __persistentStoreCoordinator;
    }

    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"iDocs.sqlite"];

    NSError *error = nil;
    __persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    if (![__persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error])
    {
        /*
         Replace this implementation with code to handle the error appropriately.

         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button.

         Typical reasons for an error here include:
         * The persistent store is not accessible;
         * The schema for the persistent store is incompatible with current managed object model.
         Check the error message to determine what the actual problem was.


         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.

         If you encounter schema incompatibility errors during development, you can reduce their frequency by:
         * Simply deleting the existing store:
         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]

         * Performing automatic lightweight migration by passing the following dictionary as the options parameter: 
         [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption, [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];

         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.

         */
        // nslog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }    

    return __persistentStoreCoordinator;
}


        ////////
        
        // Store meetID data
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     
     
     
     if (![defaults objectForKey:@"lastMeetID"]) {
     
     int idint = 0;
     NSNumber *idnumber = [NSNumber numberWithInt:idint];
     
     
     [defaults setObject:idnumber forKey:@"lastMeetID"];
     
     }
       
       NSNumber *oldnumber = [defaults objectForKey:@"lastMeetID"];
       
       
       int oldint = [oldnumber intValue];
       
       int newint = oldint + 1;
       
       NSNumber *newnumber = [NSNumber numberWithInt:newint];
       
       [meet setValue: newnumber forKey: @"meetID"];
       
        

        // nslog(@"meetname %@  meetID %@", meet.meetName, meet.meetID);

    [defaults setObject: newnumber forKey:@"lastMeetID"];
     
    [defaults synchronize];
     
    ////