----
/////////
// Tutorial Code Start
////////


- (void) tutorialCode {

        // Edit these
    NSString* thisTutKeyString = @"tut2";
    NSString* tutTitleString = @"Tutorial";
    NSString* tutMessageString = @"Tutorial Text";
        // Rest Done

    NSString* mainTutString = @"Tutorials";
    NSUserDefaults *defaultstut = [NSUserDefaults standardUserDefaults];

  
   if (! [[[defaultstut objectForKey:mainTutString] objectForKey:thisTutKeyString] boolValue]) {
    NSLog(@"showing");
    
    dispatch_async(dispatch_get_main_queue(), ^{
        UIAlertController * alert=   [UIAlertController
                                    alertControllerWithTitle:tutTitleString
                                    message:tutMessageString
                                    preferredStyle:UIAlertControllerStyleAlert];
     
     
                UIAlertAction* dontshow = [UIAlertAction
                        actionWithTitle:@"Don't Show This Again"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            
                            NSMutableDictionary* tutDict = [defaultstut objectForKey:mainTutString];
                            
                            
                            
                            if (!(tutDict)) {
                                tutDict = [[NSMutableDictionary alloc] init];
                            }
                            
                        
                            
                                [tutDict setObject:[NSNumber numberWithBool:YES] forKey:thisTutKeyString];
                                [defaultstut setObject: tutDict forKey:mainTutString];
                                [defaultstut synchronize];
                           
                            
                            
                            
                                [alert dismissViewControllerAnimated:YES completion:nil];
                            
                             
                        }];
                        UIAlertAction* done = [UIAlertAction
                        actionWithTitle:@"Close"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            
                            [alert dismissViewControllerAnimated:YES completion:nil];
                            
                             
                        }];
    
                [alert addAction:done];
                [alert addAction:dontshow];
     
                [self presentViewController:alert animated:YES completion:nil];
        });
    
    }
    else
    {
        NSLog(@"not showing");
    
    }

}
-(void)viewWillAppear:(BOOL)animated{
   [super viewWillAppear:animated];
   //something here
   [self tutorialCode];
}
/////////
// Tutorial Code End
////////

----

----

Done MeetAddViewControllet
Done MasterViewController  only update ownerMeets not online not ownermeets. still to do _____  check how server behaves between versions.
Done MeetTableViewCell
Done TutContentViewController
Done TutMainViewController
Done MeetMenuViewController
                                exportresultsbuttonpressed todo to make default
Done MeetMenuViewCell
Done SetupDiv
Done AddDiv
Done DivTableViewCell
Done GEventAdd
Done SetupGevent
Done GeventTableviewCell
Done TeamAdd
Done SetupTeams
Done TeamTableViewCel
Done SetupCompetitors - test import
Done CompetitorTableViewCell
Done CompetitorAdd

//// prechecked
SetupEventsforC
EventForCtableviewCell
CEventResultsViewController
CEventResutlsTableViewCell
EventForCAdd
PickRelayTeamsForC
relayteamsforctableviewcell
add relayteamforC
/////
EnterResults Folder
///
/// prechecked done



add meet versions to add default

---

check how many meets by counting isowner?  maybe with onlinemeet? isowner gets changed to no...  cant hurt... test
---

meetmenu remove removedivsonline

---
Done 0. new id's n default load'

11. add search to eventslist

22. result for each comp search and show in table inividual competitor results rank by result/team and then id export to csv

33. set event edited and not done when deleting ceventscore or entry ? good idea   === commitEditingStyle

44. add manual placing to all results not just high jump

5. text box and all previews set conditional formatting  ////////////

6. Dont show this again tick boxes with data for each scene //////////

88. combine comps

999. log events

Done 10. add new id's to excel imports

111111. Restore Backups option

121212. slave update server push???

Done 13. Manage Ceventscores when moving from relay to other event mabe just warn

Done 14. import teams edit for relaydisc
Done 15. Tie in TeamPlacesViewController
16. Iphone 6 Results spacing = check all spacing...   ////////

17. Add score to teamplaces results table


------

5. text box and all previews set conditional formatting  ////////////

6. Dont show this again tick boxes with data for each scene //////////


16. Iphone 6 Results spacing = check all spacing...   ////////

------

A. backupevent to check


ce
entry edited and edit done check and add to set all as edited and as done etc

check all .ceventscore or ceventscore references
check all relay disc and eventscore.competitor and sanitise not having any


online add etc with competitor nil
relaydisc in ceventscore everywhere

meetmenuviewcontroller
  xxx  addcscoreonline
   xx     cscore[@"competitor"] = cscoreObject.competitor.onlineID;  /// = cscoreObject.entry.competitors[0]; anyobject

   xxx addentryonline

xxx cscoreservermutablearray????

after online check old meet event not there
    version onine check?
    incompatiple version
        send version to meet

//relayflag





Comp # in import later  check in cycle of ceventscores if 1 is taken, otherwise allocate, if yes counter + 1
when counter = number of entries then add to end.

add/view comps on long press
add label to relay
change cell


delete competitor  // nullify

in ceventscores and backup ceventscores

- (void)willSave
{
    [super willSave];

    if (self.isDeleted)
        return;

    if (self.products.count == 0)
        [self.managedObjectContext deleteObject:self];
}



[Flurry logEvent:@"Article_Read"];



- (void)loadCSVArray {
NSLog(@"here");

AppDelegate* appDelegate = (AppDelegate*)[[UIApplication sharedApplication]delegate];

NSArray  *newArray = appDelegate.csvDataArray;
//appDelegate.csvDataArray = nil
        for (NSString* string in newArray) {
                    NSLog(@"%@",string);
            
            //create objects here
            
            
            
            
            
        }
    


}


AppDelegate* appDelegate = (AppDelegate*)[[UIApplication sharedApplication]delegate];
    
     if (appDelegate.csvDataArray != nil) {
         NSLog(@"importing csv");
         
         /// show button
         
            [self loadCSVArray];
            

     }
     else
     {
        
            // hide button
            NSLog(@"not importing");

     }




//


dispatch_async(dispatch_get_main_queue(), ^{

});



////////////////
///////////////
////////////













//////
//////  online entry done
//////
//////
//////
//////
//////
//////
//////
//////


////

not done:

layout for field events

attempts after each other, just add result [ make easy to add at event]

add attempt insert distance (cell reads attemps and best attempt)

high jump keep track of last hight entered and give attempt markers clear, auto pass if next hight.

new hight, generate tabs (section), click pass fail. cell reads best attempt and number of jumps and number of cosecutive fails (reset for pass)

ceventscores add :
    consecutive fails (counter for hightjump)  check for order of consecutive in case jumps lower later so in order

    new object attempt:
        attempt number
        result
        cleared bool

        mabe add height object? check how sections work in uitableview core data






austhetic spacing to do

?high jump  make layout?

/////////////////////

if (meetobject.onlineID) {
    NSLog(@"onlineid is there %@",meetobject.onlineID);
    }
    else
    {
    NSLog(@"onlineid not found %@",meetobject.onlineID);
        NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",meetobject.meetID,timestamp];
      [meetobject setValue: onlineID forKey: @"onlineID"];
       NSLog(@"onlineid not found %@",meetobject.onlineID);
    }


 NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",newnumber,timestamp];
      [meet setValue: onlineID forKey: @"onlineID"];






for(Team *object in results) {
}


- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 


    if ([[segue identifier] isEqualToString:@"addEventForC"]) {
    
    UINavigationController *navController = (UINavigationController*)[segue destinationViewController];
    EventForCAddViewController* compAddController = (EventForCAddViewController*)[navController topViewController];

    
        [compAddController setCompetitorItem:self.competitorObject];
        [compAddController setManagedObjectContext:self.managedObjectContext];

    
    }
    
}



- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender {
   
    
    if ([identifier isEqualToString:@"unwindToSetupEventsForCDoneSegue"]) {
        
        //checks
        if (!self.isEditing) {
            self.meet = self.competitorItem.meet;
            int competitorEventLimit = [self.meet.cEventLimit intValue];
    
        int currentEventNumber = (int)[[self.competitorItem valueForKey:@"cEventScores"] count] ;
            if (competitorEventLimit != 0) {
            
                    if (!(competitorEventLimit>currentEventNumber)) {
    
                // nslog(@"in shouldperformsegue no");
                
                UIAlertController * alert=   [UIAlertController
                                    alertControllerWithTitle:@"Too many Events For Competitor"
                                    message:@"Please delete an event or change the number of events allowed per competitor"
                                    preferredStyle:UIAlertControllerStyleAlert];
     
     
                UIAlertAction* ok = [UIAlertAction
                        actionWithTitle:@"OK"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            [alert dismissViewControllerAnimated:YES completion:nil];
                             
                        }];
                        
                [alert addAction:ok];
     
                [self presentViewController:alert animated:YES completion:nil];
                return NO;
                }
                
            }
        
   
        }
    }
    
    return YES;              
}

////////////////////


[entity setUseGPS:[NSNumber numberWithBool:YES]];
And the other way around:

BOOL isGPSOn = [[entity useGPS] boolValue];

[self.meetObject setValue:[NSNumber numberWithBool:YES] forKey:@"divsDone"];
[[self.meetObject valueForKey: @"divsDone"] boolvalue]


// nslog(@"eventscores in competitor before %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);
        ceventscore.competitor = sourceViewController.competitorObject;
        
        // nslog(@"eventscores in competitor after %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);





NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"Meet"];
NSError *error = nil;
NSUInteger meetID = [self.managedObjectContext countForFetchRequest:fetchRequest error:&error];
[meet setValue: [NSNumber numberWithUnsignedInteger:meetID] forKey: @"meetID"];


string [format stringFromDate:fulldate]

 NSDate *fulldate = [object valueForKey:@"meetDate"];
    
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
format.dateFormat = @"dd-MM-yyyy";


cell.numberOfTeamsLabel.text = [NSString stringWithFormat:@"Teams: %@",  @([[object valueForKey:@"teams"] count] )];


/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    // In the simplest, most efficient, case, reload the table view.
    [self.tableView reloadData];
}
 */




 #pragma mark - Core Data stack

/**
 Returns the managed object context for the application.
 If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.
 */
- (NSManagedObjectContext *)managedObjectContext
{
    if (__managedObjectContext != nil)
    {
        return __managedObjectContext;
    }

    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil)
    {
        __managedObjectContext = [[NSManagedObjectContext alloc] init];
        [__managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
    return __managedObjectContext;
}

/**
 Returns the managed object model for the application.
 If the model doesn't already exist, it is created from the application's model.
 */
- (NSManagedObjectModel *)managedObjectModel
{
    if (__managedObjectModel != nil)
    {
        return __managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"iDocs" withExtension:@"momd"];
    __managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];    
    return __managedObjectModel;
}

/**
 Returns the persistent store coordinator for the application.
 If the coordinator doesn't already exist, it is created and the application's store added to it.
 */
- (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{
    if (__persistentStoreCoordinator != nil)
    {
        return __persistentStoreCoordinator;
    }

    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"iDocs.sqlite"];

    NSError *error = nil;
    __persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    if (![__persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error])
    {
        /*
         Replace this implementation with code to handle the error appropriately.

         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button.

         Typical reasons for an error here include:
         * The persistent store is not accessible;
         * The schema for the persistent store is incompatible with current managed object model.
         Check the error message to determine what the actual problem was.


         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.

         If you encounter schema incompatibility errors during development, you can reduce their frequency by:
         * Simply deleting the existing store:
         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]

         * Performing automatic lightweight migration by passing the following dictionary as the options parameter: 
         [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption, [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];

         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.

         */
        // nslog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }    

    return __persistentStoreCoordinator;
}


        ////////
        
        // Store meetID data
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     
     
     
     if (![defaults objectForKey:@"lastMeetID"]) {
     
     int idint = 0;
     NSNumber *idnumber = [NSNumber numberWithInt:idint];
     
     
     [defaults setObject:idnumber forKey:@"lastMeetID"];
     
     }
       
       NSNumber *oldnumber = [defaults objectForKey:@"lastMeetID"];
       
       
       int oldint = [oldnumber intValue];
       
       int newint = oldint + 1;
       
       NSNumber *newnumber = [NSNumber numberWithInt:newint];
       
       [meet setValue: newnumber forKey: @"meetID"];
       
        

        // nslog(@"meetname %@  meetID %@", meet.meetName, meet.meetID);

    [defaults setObject: newnumber forKey:@"lastMeetID"];
     
    [defaults synchronize];
     


        
    // Bumf
[mutableHTML appendString:@"<html> <head>"];
[mutableHTML appendString:@"<style> <!--table {} @page {margin:.75in .7in .75in .7in; }"];

[mutableHTML appendString:@"td { padding:0px; mso-ignore:padding; color:windowtext; font-size:10.0pt; font-weight:700; font-style:normal; text-decoration:none; white-space:nowrap; font-family:Garamond, serif; text-align:center; vertical-align:middle; border-top:1.0pt solid windowtext; border-right:1.0pt solid windowtext; border-bottom:1.0pt solid windowtext; border-left:1.0pt solid windowtext;; white-space:normal; width:136pt; height:19pt } --> </style>"];

[mutableHTML appendString:@"</head><body>"];

[mutableHTML appendString:@"<table border=0 cellpadding=0 cellspacing=0  style='border-collapse: collapse;'><tr  style='height:59.25pt'> "];
//[mutableHTML appendString:@"<table border=0 cellpadding=0 cellspacing=0  style='border-collapse: collapse;'><tr  style='height:30pt'> "];

[mutableHTML appendString:@"<td colspan="];
[mutableHTML appendFormat:@"%d",fullspannumber]; //columbs
 [mutableHTML appendString:@" style='font-size:28.0pt;'>"];
 
 // Meet Name and Date
 
 /*
NSDateFormatter *dateFormat = [[NSDateFormatter alloc] init];
[dateFormat setDateFormat:@"yyyy-MM-dd"];

NSDateFormatter *timeFormat = [[NSDateFormatter alloc] init];
[timeFormat setDateFormat:@"HH:mm:ss"];

//NSDate *date = [[NSDate alloc] init];
NSDate *date = self.meetObject.meetDate;

NSString *theDate = [dateFormat stringFromDate:date];
//NSString *theTime = [timeFormat stringFromDate:date];




 
 [mutableHTML appendFormat:@"%@  %@",self.meetObject.meetName,theDate];
 */
 
 [mutableHTML appendFormat:@"%@",self.meetObject.meetName];
 
 //
 [mutableHTML appendString:@"</td> </tr><tr style='height:26.25pt'> "];
 [mutableHTML appendString:@"<td colspan="];
  [mutableHTML appendFormat:@"%d",fullspannumber]; //columbs
  [mutableHTML appendString:@" "];
[mutableHTML appendString:@"style='font-size:20.0pt'>"];
[mutableHTML appendString:@"OVERALL TOTALS"];
[mutableHTML appendString:@"</td>"];
[mutableHTML appendString:@"</tr> <tr > <td style='font-size:16.0pt'>"];
[mutableHTML appendString:@"DIVISION"];
[mutableHTML appendString:@"</td>"];

for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


 [mutableHTML appendString:@"<td style='font-size:20.0pt'>"];
 [mutableHTML appendFormat:@"%@",team.teamName];
 [mutableHTML appendString:@"</td>"];
 
 
 }
 [mutableHTML appendString:@"</tr>"];
 
 
 
 for (Division* div in [self.meetObject.divisions sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"divID" ascending:YES]]]) {
	
    [mutableHTML appendString:@"<tr > <td style='font-size:16.0pt' >"];
    [mutableHTML appendFormat:@"%@",div.divName];
    [mutableHTML appendString:@"</td>"];
     
     NSMutableArray* scoreArray = [[NSMutableArray alloc]init];
     NSMutableDictionary* nameDict = [[NSMutableDictionary alloc] init];
        for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = [NSNumber numberWithInt: [self sumResultsForTeam:team AndDiv:div]];
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
            
            [scoreArray addObject:numberInt];
            [nameDict setObject:numberInt forKey:team.teamName];
            
 
        }
     
        [mutableHTML appendString:@" </tr>"];

               
 /// Place
 [mutableHTML appendString:@"<tr> <td style='font-size:16.0pt' >"];
 [mutableHTML appendString:@"Rank"];
 [mutableHTML appendString:@"</td>"];
     
     
        int counter;
     
     
        for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {
            
            NSNumber* tempnumber = [nameDict objectForKey:team.teamName];
            NSSortDescriptor *highestToLowest = [NSSortDescriptor sortDescriptorWithKey:@"self" ascending:NO];
            NSArray*sortArray = [NSArray arrayWithObject:highestToLowest];
            [scoreArray sortUsingDescriptors:sortArray];
            counter = 0;
            NSNumber* scorenumber = scoreArray[counter];
            
            
            while (tempnumber != scorenumber) {
                counter++;
                scorenumber = scoreArray[counter];
            }
            
            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = [NSNumber numberWithInt: counter+1];
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
        }
        [mutableHTML appendString:@" </tr>"];
     
     
     

  
     

}
 
 // Event
 

  
  /// Final Total
  
  [mutableHTML appendString:@"<tr> <td style='font-size:20.0pt'>"];
  [mutableHTML appendString:@"TOTAL"];
  [mutableHTML appendString:@"</td>"];
  
 for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]])
    {
        

            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = team.teamScore;
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
 
        }
        [mutableHTML appendString:@" </tr>"];
//26.25
  
 
 [mutableHTML appendString:@"<tr style='height:48pt'> <td style='font-size:20.0pt'>"];
   [mutableHTML appendString:@"POSITION"];
  [mutableHTML appendString:@"</td>"];
  
  
 for (Team* team in [self.meetObject.teams sortedArrayUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"teamID" ascending:YES]]]) {


            [mutableHTML appendString:@"<td style='color:blue;font-size:16.0pt'>"];
            NSNumber* numberInt = team.teamPlace;
            [mutableHTML appendFormat:@"%@",numberInt];
            [mutableHTML appendString:@"</td>"];
 
 
        }
        [mutableHTML appendString:@" </tr>"];


  [mutableHTML appendString:@"</table></body></html>"];

    ////