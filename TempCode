
set save success as yes an just do a no on error... check at end (count?)

check save settings

check internet connection before load try and handle error

later  delay on load is done on my end?




onlinemeet handle error with popup?

competitors add timestamp

add seperate section for handling input records

add merge competitors section (hou kop met all die verskillende areas wat moet merge en verander..)



//////


learn how to set up defaults

set save as default option at bottom (lets do first option first and then after launch do next)



////

not done:




austhetic spacing to do

?high jump  make layout?

/////////////////////

if (meetobject.onlineID) {
    NSLog(@"onlineid is there %@",meetobject.onlineID);
    }
    else
    {
    NSLog(@"onlineid not found %@",meetobject.onlineID);
        NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",meetobject.meetID,timestamp];
      [meetobject setValue: onlineID forKey: @"onlineID"];
       NSLog(@"onlineid not found %@",meetobject.onlineID);
    }


 NSString*   timestamp = [NSString stringWithFormat:@"%.0f",[[NSDate date] timeIntervalSinceReferenceDate]];
    
      NSString* onlineID = [NSString stringWithFormat:@"%@%@",newnumber,timestamp];
      [meet setValue: onlineID forKey: @"onlineID"];






for(Team *object in results) {
}


- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
 


    if ([[segue identifier] isEqualToString:@"addEventForC"]) {
    
    UINavigationController *navController = (UINavigationController*)[segue destinationViewController];
    EventForCAddViewController* compAddController = (EventForCAddViewController*)[navController topViewController];

    
        [compAddController setCompetitorItem:self.competitorObject];
        [compAddController setManagedObjectContext:self.managedObjectContext];

    
    }
    
}



- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender {
   
    
    if ([identifier isEqualToString:@"unwindToSetupEventsForCDoneSegue"]) {
        
        //checks
        if (!self.isEditing) {
            self.meet = self.competitorItem.meet;
            int competitorEventLimit = [self.meet.cEventLimit intValue];
    
        int currentEventNumber = (int)[[self.competitorItem valueForKey:@"cEventScores"] count] ;
            if (competitorEventLimit != 0) {
            
                    if (!(competitorEventLimit>currentEventNumber)) {
    
                // nslog(@"in shouldperformsegue no");
                
                UIAlertController * alert=   [UIAlertController
                                    alertControllerWithTitle:@"Too many Events For Competitor"
                                    message:@"Please delete an event or change the number of events allowed per competitor"
                                    preferredStyle:UIAlertControllerStyleAlert];
     
     
                UIAlertAction* ok = [UIAlertAction
                        actionWithTitle:@"OK"
                        style:UIAlertActionStyleDefault
                        handler:^(UIAlertAction * action)
                        {
                            [alert dismissViewControllerAnimated:YES completion:nil];
                             
                        }];
                        
                [alert addAction:ok];
     
                [self presentViewController:alert animated:YES completion:nil];
                return NO;
                }
                
            }
        
   
        }
    }
    
    return YES;              
}

////////////////////


[entity setUseGPS:[NSNumber numberWithBool:YES]];
And the other way around:

BOOL isGPSOn = [[entity useGPS] boolValue];

[self.meetObject setValue:[NSNumber numberWithBool:YES] forKey:@"divsDone"];
[[self.meetObject valueForKey: @"divsDone"] boolvalue]


// nslog(@"eventscores in competitor before %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);
        ceventscore.competitor = sourceViewController.competitorObject;
        
        // nslog(@"eventscores in competitor after %@ :  %@",sourceViewController.competitorObject.compName,[NSString stringWithFormat:@"%@",  @([[sourceViewController.competitorObject valueForKey:@"cEventScores"] count] ) ]);





NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"Meet"];
NSError *error = nil;
NSUInteger meetID = [self.managedObjectContext countForFetchRequest:fetchRequest error:&error];
[meet setValue: [NSNumber numberWithUnsignedInteger:meetID] forKey: @"meetID"];


string [format stringFromDate:fulldate]

 NSDate *fulldate = [object valueForKey:@"meetDate"];
    
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
format.dateFormat = @"dd-MM-yyyy";


cell.numberOfTeamsLabel.text = [NSString stringWithFormat:@"Teams: %@",  @([[object valueForKey:@"teams"] count] )];


/*
// Implementing the above methods to update the table view in response to individual changes may have performance implications if a large number of changes are made simultaneously. If this proves to be an issue, you can instead just implement controllerDidChangeContent: which notifies the delegate that all section and object changes have been processed. 
 
 - (void)controllerDidChangeContent:(NSFetchedResultsController *)controller
{
    // In the simplest, most efficient, case, reload the table view.
    [self.tableView reloadData];
}
 */




 #pragma mark - Core Data stack

/**
 Returns the managed object context for the application.
 If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.
 */
- (NSManagedObjectContext *)managedObjectContext
{
    if (__managedObjectContext != nil)
    {
        return __managedObjectContext;
    }

    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil)
    {
        __managedObjectContext = [[NSManagedObjectContext alloc] init];
        [__managedObjectContext setPersistentStoreCoordinator:coordinator];
    }
    return __managedObjectContext;
}

/**
 Returns the managed object model for the application.
 If the model doesn't already exist, it is created from the application's model.
 */
- (NSManagedObjectModel *)managedObjectModel
{
    if (__managedObjectModel != nil)
    {
        return __managedObjectModel;
    }
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"iDocs" withExtension:@"momd"];
    __managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];    
    return __managedObjectModel;
}

/**
 Returns the persistent store coordinator for the application.
 If the coordinator doesn't already exist, it is created and the application's store added to it.
 */
- (NSPersistentStoreCoordinator *)persistentStoreCoordinator
{
    if (__persistentStoreCoordinator != nil)
    {
        return __persistentStoreCoordinator;
    }

    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"iDocs.sqlite"];

    NSError *error = nil;
    __persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    if (![__persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&error])
    {
        /*
         Replace this implementation with code to handle the error appropriately.

         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development. If it is not possible to recover from the error, display an alert panel that instructs the user to quit the application by pressing the Home button.

         Typical reasons for an error here include:
         * The persistent store is not accessible;
         * The schema for the persistent store is incompatible with current managed object model.
         Check the error message to determine what the actual problem was.


         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.

         If you encounter schema incompatibility errors during development, you can reduce their frequency by:
         * Simply deleting the existing store:
         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]

         * Performing automatic lightweight migration by passing the following dictionary as the options parameter: 
         [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption, [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];

         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.

         */
        // nslog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }    

    return __persistentStoreCoordinator;
}


        ////////
        
        // Store meetID data
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
     
     
     
     if (![defaults objectForKey:@"lastMeetID"]) {
     
     int idint = 0;
     NSNumber *idnumber = [NSNumber numberWithInt:idint];
     
     
     [defaults setObject:idnumber forKey:@"lastMeetID"];
     
     }
       
       NSNumber *oldnumber = [defaults objectForKey:@"lastMeetID"];
       
       
       int oldint = [oldnumber intValue];
       
       int newint = oldint + 1;
       
       NSNumber *newnumber = [NSNumber numberWithInt:newint];
       
       [meet setValue: newnumber forKey: @"meetID"];
       
        

        // nslog(@"meetname %@  meetID %@", meet.meetName, meet.meetID);

    [defaults setObject: newnumber forKey:@"lastMeetID"];
     
    [defaults synchronize];
     
    ////